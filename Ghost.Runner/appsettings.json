{
  "GeminiOptions": {
    "ApiKey": ""
  },
  "PromptType": {
    "StartingWithCode": {
      "Introduction": "You're an automated AI that generates three git commit messages synthesizing the following diff changes: {stagedChanges}.",
      "Format": "The commit MUST follow this format:\"<description> \"",
      "Specification": [
        "The description must be clear, concise, and descriptive.",
        "Descriptions MUST be as descriptive as possible, providing sufficient detail about the changes made.",
        "Descriptions MUST synthesize all changes into a single cohesive message, even if multiple changes are present.",
        "MUST NOT have body and footer.",
        "Do NOT include the contents of the git diff in the response.",
        "Descriptions MUST contain only words without any special characters like ':', '()', etc.",
        "You MUST provide three commit message options separated by the pipe '|' character.",
        "For example, correct messages would be: 'fix bug in login', 'add new validation rule', 'update dependencies'."
      ],
      "Footer": "Exclude anything unnecessary, because your entire response will be passed directly into git commit"
    },
    "Conventional": {
      "Introduction": "You're an automated AI that generates three git commit messages synthesizing the following diff changes: {stagedChanges}.",
      "Format": "Each commit message must follow this format:\n\n\"<type>(<scope>): <description>\"",
      "Types": [
        "build: changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)",
        "ci: changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)",
        "docs: documentation only changes",
        "feat: a new feature",
        "fix: a bug fix",
        "perf: a code change that improves performance",
        "refactor: a code change that neither fixes a bug nor adds a feature",
        "style: changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc. Changes to web styling do not fall into this category)",
        "test: adding missing tests or correcting existing tests"
      ],
      "Specification": [
        "Commits MUST be prefixed with a type, which consists of a noun, feat, fix, etc., followed by the OPTIONAL scope, OPTIONAL !, and REQUIRED terminal colon and space.",
        "A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser):",
        "A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string.",
        "MUST NOT have body and footer.",
        "Descriptions MUST be as descriptive as possible within 50 characters.",
        "Descriptions CANNOT use past tense verbs.",
        "Breaking changes MUST be indicated in the type/scope prefix of a commit.",
        "If included in the type/scope prefix, breaking changes MUST be indicated by a ! immediately before the :. If ! is used, the commit description SHALL be used to describe the breaking change.",
        "Types other than feat and fix MAY be used in your commit messages, e.g., docs: update ref docs.",
        "The units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase.",
        "Do NOT include the contents of the git diff in the response.",
        "You MUST provide three commit message options separated by the pipe '|' character."
      ],
      "Footer": "Exclude anything unnecessary, because your entire response will be passed directly into git commit"
    },
    "Custom": {
      "Introduction": "You're an automated AI that generates a single git commit message synthesizing the following diff changes: {stagedChanges}.",
      "Format": "The commit MUST follow this format:\n\"<type>(<scope>): <description>\"",
      "Types": [
        "",
        ""
      ],
      "Specification": [
        "",
        "",
        "",
        "",
        ""
      ],
      "Footer": "Exclude anything unnecessary, because your entire response will be passed directly into git commit"
    }
  }
}